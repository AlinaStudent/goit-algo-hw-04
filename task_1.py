import argparse
import logging
import shutil
import sys
from pathlib import Path


def setup_logging(verbose: bool = False) -> None:
    logging.basicConfig(
        level=logging.DEBUG if verbose else logging.INFO,
        format="%(levelname)s: %(message)s"
    )


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="–†–µ–∫—É—Ä—Å–∏–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è/–ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∑ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è–º –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º."
    )
    parser.add_argument("source_dir", nargs="?", type=Path,
                        help="–®–ª—è—Ö –¥–æ –≤–∏—Ö—ñ–¥–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó")
    parser.add_argument("dest_dir", nargs="?", default=Path("dist"), type=Path,
                        help="–®–ª—è—Ö –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: ./dist)")
    parser.add_argument("--move", action="store_true",
                        help="–ü–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ —Ñ–∞–π–ª–∏ (–∑–∞–º—ñ—Å—Ç—å –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è)")
    parser.add_argument("-v", "--verbose", action="store_true",
                        help="–î–µ—Ç–∞–ª—å–Ω—ñ –ª–æ–≥–∏")
    parser.add_argument("--create-test", action="store_true",
                        help="–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –∑ —Ñ–∞–π–ª–∞–º–∏ —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —ó—ó —è–∫ source_dir")
    parser.add_argument("--print-tree", action="store_true",
                        help="–ü—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–∏–≤–µ—Å—Ç–∏ –¥–µ—Ä–µ–≤–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è")
    return parser.parse_args()


def iter_files_recursively(root: Path, skip: Path | None = None):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏—Ç—å —É—Å—ñ —Ñ–∞–π–ª–∏ —É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó."""
    try:
        for entry in root.iterdir():
            if skip and entry.resolve() == skip:
                continue
            if entry.is_dir() and not entry.is_symlink():
                yield from iter_files_recursively(entry, skip=skip)
            elif entry.is_file():
                yield entry
    except Exception as e:
        logging.warning(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ {root}: {e}")


def safe_dest_path(dest_dir: Path, src_file: Path) -> Path:
    """–§–æ—Ä–º—É—î –±–µ–∑–ø–µ—á–Ω–∏–π —à–ª—è—Ö (—è–∫—â–æ —ñ–º‚Äô—è –≤–∂–µ —ñ—Å–Ω—É—î ‚Äî –¥–æ–¥–∞—î _1, _2...)."""
    ext = src_file.suffix
    stem = src_file.stem
    candidate = dest_dir / f"{stem}{ext}"
    counter = 1
    while candidate.exists():
        candidate = dest_dir / f"{stem}_{counter}{ext}"
        counter += 1
    return candidate


def place_for(src_file: Path, dest_root: Path) -> Path:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Ç–µ–∫—É –¥–ª—è —Ñ–∞–π–ª—É –∑–≥—ñ–¥–Ω–æ –∑ –π–æ–≥–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º."""
    ext = src_file.suffix.lower().lstrip(".")
    subdir = ext if ext else "no_extension"
    return dest_root / subdir


def copy_or_move(src: Path, dst: Path, move: bool) -> None:
    """–ö–æ–ø—ñ—é—î –∞–±–æ –ø–µ—Ä–µ–º—ñ—â—É—î —Ñ–∞–π–ª."""
    try:
        if move:
            shutil.move(src, dst)
        else:
            shutil.copy2(src, dst)
    except Exception as e:
        logging.warning(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–ø–µ—Ä–∞—Ü—ñ—ó {src} -> {dst}: {e}")


def create_test_directory(base: Path) -> Path:
    """–°—Ç–≤–æ—Ä—é—î —Ç–µ—Å—Ç–æ–≤—É —Ç–µ–∫—É –∑ –∫—ñ–ª—å–∫–æ–º–∞ —Ñ–∞–π–ª–∞–º–∏."""
    test_dir = base / "src_test"
    test_dir.mkdir(parents=True, exist_ok=True)
    (test_dir / "file1.txt").write_text("hello")
    (test_dir / "file2.doc").write_text("world")
    (test_dir / "file3").write_text("no extension")
    subdir = test_dir / "sub"
    subdir.mkdir(exist_ok=True)
    (subdir / "nested.py").write_text("print('nested')")
    logging.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—É —Ç–µ–∫—É: {test_dir}")
    return test_dir


def print_tree(root: Path) -> None:
    """–î—Ä—É–∫—É—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —É –≤–∏–≥–ª—è–¥—ñ '—è–ª–∏–Ω–∫–∏'."""
    for path in sorted(root.rglob("*")):
        rel = path.relative_to(root)
        indent = "    " * (len(rel.parts) - 1)
        prefix = "‚îî‚îÄ‚îÄ " if path.is_file() else "üìÇ "
        print(f"{indent}{prefix}{rel.name}")


def main() -> int:
    args = parse_args()
    setup_logging(args.verbose)

    # –Ø–∫—â–æ —Ç—Ä–µ–±–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤—É —Ç–µ–∫—É
    if args.create_test:
        base = Path.cwd()
        source = create_test_directory(base)
    else:
        if not args.source_dir:
            print("–ü–æ–º–∏–ª–∫–∞: –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ source_dir –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ --create-test")
            return 1
        source = args.source_dir.resolve()

    dest = args.dest_dir.resolve()

    if not source.exists() or not source.is_dir():
        logging.error(f"–ù–µ–≤—ñ—Ä–Ω–∞ –≤–∏—Ö—ñ–¥–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: {source}")
        return 1

    dest.mkdir(parents=True, exist_ok=True)

    processed = 0
    for file_path in iter_files_recursively(source, skip=dest):
        target_dir = place_for(file_path, dest)
        target_dir.mkdir(parents=True, exist_ok=True)
        final_path = safe_dest_path(target_dir, file_path)
        copy_or_move(file_path, final_path, move=args.move)
        processed += 1

    logging.info(f"–ì–æ—Ç–æ–≤–æ. –û–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ —Ñ–∞–π–ª—ñ–≤: {processed}")

    if args.print_tree:
        print(f"\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–∫–∏ {dest}:")
        print_tree(dest)

    return 0


if __name__ == "__main__":
    sys.exit(main())

# python task_1.py --create-test --print-tree
